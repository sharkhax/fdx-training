package com.drobot.cfunc.trigger;

import com.drobot.cfunc.ProjectVariable;
import com.drobot.cfunc.util.TriggerUtil;
import com.google.api.services.cloudscheduler.v1.CloudScheduler;
import com.google.api.services.cloudscheduler.v1.model.HttpTarget;
import com.google.api.services.cloudscheduler.v1.model.Job;
import com.google.api.services.cloudscheduler.v1.model.RunJobRequest;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public enum CloudSchedulerTrigger {

    INSTANCE;

    private final CloudScheduler scheduler;

    CloudSchedulerTrigger() {
        scheduler = TriggerUtil.buildScheduler();
    }

    public void runScheduler(String fullSchedulerName) throws IOException {
        RunJobRequest jobRequest = new RunJobRequest();
        CloudScheduler.Projects.Locations.Jobs.Run request
                = scheduler.projects().locations().jobs().run(fullSchedulerName, jobRequest);
        request.execute();
    }

    public String createScheduler(String jobId) throws IOException {
        String parent = buildParent();
        Job job = configureNewJob(jobId);
        CloudScheduler.Projects.Locations.Jobs.Create create =
                scheduler.projects().locations().jobs().create(parent, job);
        Job createdScheduler = create.execute();
        return createdScheduler.getName();
    }

    public void deleteScheduler(String fullSchedulerName) throws IOException {
        CloudScheduler.Projects.Locations.Jobs.Delete delete =
                scheduler.projects().locations().jobs().delete(fullSchedulerName);
        delete.execute();
    }

    private String buildParent() {
        return "projects/" + ProjectVariable.PROJECT_ID
                + "/locations/" + ProjectVariable.EU_REGION;
    }

    private Job configureNewJob(String jobId) {
        String name = ProjectVariable.SCHEDULER_NAME + "-" + new Date().getTime();
        String fullName = buildSchedulerFullName(name);
        String description = "Autogenerated cloud scheduler instance for triggering cloud function";
        HttpTarget httpTarget = configureHttpTarget(jobId, fullName);
        Job job = new Job();
        job.setName(fullName);
        job.setSchedule(ProjectVariable.SCHEDULE);
        job.setDescription(description);
        job.setTimeZone(ProjectVariable.TIME_ZONE);
        job.setHttpTarget(httpTarget);
        return job;
    }

    private String buildSchedulerFullName(String schedulerName) {
        return buildParent() + "/jobs/" + schedulerName;
    }

    private HttpTarget configureHttpTarget(String jobId, String schedulerName) {
        Map<String, String> headers = new HashMap<>();
        HttpTarget httpTarget = new HttpTarget();
        httpTarget.setHttpMethod("POST");
        headers.put(ProjectVariable.EXTRACT_JOB_ID_HEADER, jobId);
        headers.put(ProjectVariable.SCHEDULER_NAME_HEADER, schedulerName);
        httpTarget.setHeaders(headers);
        httpTarget.setUri(ProjectVariable.TRANSFORM_JOB_TRIGGER_URL);
        return httpTarget;
    }
}
